package com.asia.provider.seedata.service.impl;

import java.io.IOException;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.xml.sax.InputSource;

import redis.clients.jedis.Jedis;

import com.asia.provider.common.db.QryCenter;
import com.asia.provider.seedata.redis.RedisClient;
import com.asia.provider.seedata.service.DataService;

@Transactional
public class DataServiceImpl implements DataService {
	
	private static Log log = LogFactory.getLog(DataServiceImpl.class);
	
	private static String bendiwang[]={"/nj","/wx","/zj","/sz","/nt","/yz","/yc","/xz","/ha","/lyg","/cz","/tz","/sq","/js"};

	@Resource(name="qryCenter")
	private QryCenter qryCenter;
	
	public static void main(String[] args) throws Exception
	{
		Connection conn = null;
	    Statement stmt = null;
	    ResultSet rs = null;
	    String driverClassName = "", url = "", userName = "sjjs_cx", password = "MfB#15js";
	    String ip = "";
	    String port = "";
	    String sid = "";
	    String connectStr = 
"(DESCRIPTION =\n" +
"     (ADDRESS = (PROTOCOL = TCP)(HOST = ***.***.**.***)(PORT = 1621))\n" + 
"     (ADDRESS = (PROTOCOL = TCP)(HOST = ***.***.**.***)(PORT = 1621))\n" + 
"     (LOAD_BALANCE = off)\n" + 
"     (FAILOVER = on)\n" + 
"     (CONNECT_DATA =\n" + 
"       (SERVICE_NAME = *******)\n" + 
"       (FAILOVER_MODE =\n" + 
"         (TYPE = SELECT)\n" + 
"         (METHOD = BASIC)\n" + 
"         (RETRIES = 50)\n" + 
"         (DELAY = 10)\n" + 
"       )\n" + 
"      )\n" + 
"    )";
	    url = getUrl("oracle", ip, port, sid, connectStr);
	    System.out.println(url);
		driverClassName = getDriver("oracle");
	    Class.forName(driverClassName);
	    conn = DriverManager.getConnection(url, userName,password);//连接数据库
	    stmt = conn.createStatement();
	    rs = stmt.executeQuery("select 1 from dual");
	    while (rs.next()) {//使当前记录指针定位到记录集的第一条记录
	    	System.out.println("1");
	    }
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked"})
	@Override
	@Transactional(propagation=Propagation.REQUIRED)
	public Object getNodeTree() {
		Map map = new HashMap();
		map.put("resultCode",0);
		map.put("resultMsg","0000");
		String selectAllNodeInfo="SELECT NODE_ID \"nodeId\", NODE_NAME \"nodeName\", STATE \"state\", UP_NODE_ID \"parentNodeId\",NODE_DESC \"nodeDesc\" FROM CSS_TOOLS.TRI_DATA_NODE WHERE STATE='A' ORDER BY NODE_ID";
		List<Map<String, Object>> result=qryCenter.queryByJdbcTemplate(selectAllNodeInfo, null);
		map.put("telecom_node_view_get_response",result);
		return (Object)map;
	}
	
    private static Map<String,String> getMapForXml(String xml){
    	Map<String,String> map = new HashMap<String,String>();
		StringReader read = new StringReader(xml);
		// 创建新的输入源SAX 解析器将使用 InputSource 对象来确定如何读取 XML 输入
		InputSource source = new InputSource(read);
		SAXBuilder sb = new SAXBuilder();
		Document doc;
		try {
			doc = (Document) sb.build(source);
			// 取得根元素
			Element root = doc.getRootElement();
			String view_code=root.getChild("view-code")==null?"":root.getChild("view-code").getTextTrim();
			String view_name=root.getChild("view-name")==null?"":root.getChild("view-name").getTextTrim();
			String view_comment=root.getChild("view-comment")==null?"":root.getChild("view-comment").getTextTrim();
			map.put("view_code", view_code);
			map.put("view_name", view_name);
			map.put("view_comment", view_comment);
			map.put("result","success");
		} catch (JDOMException e) {
			map.put("result","fail");
			return map;
		} catch (IOException e) {
			map.put("result","fail");
			return map;
		}
		return map;
    }
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
    public Object getViewQuery(Map<String,Object> dataMap){
    	Map<String,Object> getViewQueryMap = new HashMap<String,Object>();
    	//当前页
    	Integer pageNum = Integer.parseInt(dataMap.get("pageNum").toString());
    	//页面展示长度
    	Integer page_Size = Integer.parseInt(dataMap.get("pageSize").toString());
    	List<Object> param1= new ArrayList<Object>();
    	//获得目录路劲
    	param1.add(Integer.parseInt(dataMap.get("nodeId").toString()));
    	//param1.add(Integer.parseInt(nodeId));
    	String getRouteByNodeId="select CSS_TOOLS.f_Get_Full_Path_By_Node_Id(?) path From dual";
    	Map<String, Object> map1=qryCenter.queryFirstRowByJdbcTemplate(getRouteByNodeId, param1);
    	String route=map1.get("path")==null?"":map1.get("path").toString();
    	getViewQueryMap.put("route", "/"+route);
    	//获得route对应的xml内容，然后进行解析
    	Jedis j = new RedisClient().getJedis();
    	Map<String,String> mapTotal=new HashMap<String,String>();
    	for(String net:bendiwang){
			mapTotal.putAll(j.hgetAll(net));
		}
    	String xml = mapTotal.get("/"+route);
    	//解析xml
    	getViewQueryMap.put("resultCode", 0);
    	getViewQueryMap.put("resultMsg", "0000");
    	//错误日志提醒  
    	String errorlog="xml标记配对错误";
		Map<String,Object> obj = new HashMap<String,Object>();
		StringReader read = new StringReader(xml);
		// 创建新的输入源SAX 解析器将使用 InputSource 对象来确定如何读取 XML 输入
		InputSource source = new InputSource(read);
		SAXBuilder sb = new SAXBuilder();
		Document doc;
		try {
			doc = (Document) sb.build(source);
			// 取得根元素
			Element root = doc.getRootElement();
			String view_code=root.getChild("view-code").getTextTrim();
			String view_name=root.getChild("view-name").getTextTrim();
			String view_comment=root.getChild("view-comment")==null?"":root.getChild("view-comment").getTextTrim();
			//数据源和具体sql，jdbc连接
			String view_database_resource=root.getChild("view-database-resource").getText();
			String view_sql=root.getChild("view-sql").getTextTrim();
			String view_type=root.getChild("view-type").getTextTrim();
			//交叉报表
			if("3".equals(view_type)){
				Element intersect=root.getChild("intersect-params");
				if(intersect!=null){
					String title_intersect =intersect.getChild("title-intersect").getTextTrim();
					String column_intersect =intersect.getChild("column-intersect").getTextTrim();
					obj.put("title_intersect", title_intersect);
					obj.put("column_intersect", column_intersect);
				}
			}
			obj.put("type", view_type);
			obj.put("view_code", view_code);
			obj.put("view_name", view_name);
			obj.put("view_description", view_comment);
			//obj.put("view_database_resource", view_database_resource);
			//obj.put("view_sql", view_sql);
			Element view_attibute = root.getChild("view-attribute");
			//表头
			errorlog="表头错误";
			List<String> colunmList=new ArrayList<String>();
			List column_list= new ArrayList();
			Element title_items = view_attibute.getChild("title-items");
			List<Element> title_itemList =title_items.getChildren("title-item");
			for(Element ele:title_itemList ){
				Map o = new HashMap();
				String column = ele.getChild("column")==null?"":ele.getChild("column").getTextTrim();
				String column_name = ele.getChild("column_name")==null?"":ele.getChild("column_name").getTextTrim();
				String sys_param = ele.getChild("sys-param")==null?"":ele.getChild("sys-param").getTextTrim();
				String visible = ele.getChild("visiable")==null?"":ele.getChild("visiable").getTextTrim();
				String KPI_CODE = ele.getChild("KPI-Code")==null?"":ele.getChild("KPI-Code").getTextTrim();
				o.put("code", column);
				colunmList.add(column);
				o.put("name", column_name);
				o.put("KPICode", KPI_CODE);
				o.put("visible", visible);
				o.put("sys_param", sys_param.equals("")?"":sys_param.substring(sys_param.indexOf("{")+1, sys_param.indexOf("}")));
				column_list.add(o);
			}
			obj.put("column_list", column_list);
			//参数
			errorlog="参数错误";
			List param_list= new ArrayList();
			//Element params2 = view_attibute.getChild("params");
			//获得param列表顺序
			List<String> paramLinkeList = new LinkedList<String>();
			if(view_attibute.getChild("params")==null){
				obj.put("param_list", param_list);
			}else{
				if(view_attibute.getChild("params").getChildren("param")==null){
					obj.put("param_list", param_list);
				}else{
					List<Element> param3 = view_attibute.getChild("params").getChildren("param");
					for(Element ele:param3 ){
						String column_name = ele.getChild("column_name")==null?"":ele.getChild("column_name").getTextTrim();
						Map paramObject = new HashMap();
						paramObject.put("name", column_name);
						//sys_param必传
						String sys_param = ele.getChild("sys-param").getTextTrim();
						paramLinkeList.add(sys_param);
						List<Object> param4 = new ArrayList<Object>();
						param4.add(sys_param);
						String getSqlByParam="select QUERY_SQL,DISPLAY_TP from CSS.view_param_msg where PARAM_ALIAS=?";
						Map<String,Object> temMap4=qryCenter.queryFirstRowByJdbcTemplate(getSqlByParam, param4);
						String sql = temMap4.get("QUERY_SQL")==null?"": temMap4.get("QUERY_SQL").toString();
						Integer type = Integer.parseInt(temMap4.get("DISPLAY_TP").toString());
						List<String> sql_param_list = new ArrayList<String>();
						String sql_execute=sql;
						if(!sql_execute.equals("")){
							while(sql_execute.indexOf("{")>-1){
								int index=sql_execute.indexOf("{");
								sql_execute=sql_execute.substring(index+1);
								int index1=sql_execute.indexOf("}");
								sql_param_list.add(sql_execute.substring(0,index1));
								sql_execute=sql_execute.substring(index1+1);
							}
						}
						//动态替换param中sql的参数
						if(sql_param_list.size()>0){
							for(String s:sql_param_list){
								sql=sql.replace("{"+s+"}",dataMap.get(s)==null?"":dataMap.get(s).toString());
							}
						}
						if(type==4){
							List textArray = new ArrayList();
							paramObject.put("data", textArray);
							paramObject.put("type", type);
						}
						if(type==3){
							List datArray = new ArrayList();
							paramObject.put("data", datArray);
							paramObject.put("type", type);
						}
						if(type==2){
							List<Map<String, Object>> list2=qryCenter.queryByJdbcTemplate(sql, null);
							paramObject.put("type", type);
							paramObject.put("data",list2);
						}
						if(type==1){
							List<Map<String, Object>> list1=qryCenter.queryByJdbcTemplate(sql, null);
							paramObject.put("type", type);
							paramObject.put("data", list1);
						}
						paramObject.put("code", sys_param.substring(sys_param.indexOf("{")+1, sys_param.indexOf("}")));
						//shayy add 20150428 界面参数增加是否可见--begin
						//visible--非必传
						String visiable = ele.getChild("visiable")==null?"true":ele.getChild("visiable").getTextTrim();
						paramObject.put("visiable", visiable);
						//shayy add 20150428 界面参数增加是否可见--end
						param_list.add(paramObject);
					}
					obj.put("param_list", param_list);
				}
			}
			String  author = view_attibute.getChild("author").getTextTrim();
			String  rela_mbl = view_attibute.getChild("rela_mbl").getTextTrim();
			if (page_Size == 15)
			{//客户端传默认值15时，以xml配置的优先；客户端手工修改后，以客户端传的优先
				page_Size = Integer.parseInt(view_attibute.getChild("page-size").getTextTrim());
			}
			obj.put("view_creator", author);
			obj.put("view_creator_phone", rela_mbl);
			//获得相关的视图关系---非必填
			errorlog="相关视图错误";
			List<Element> list = new ArrayList<Element>();
			List rel_Array = new ArrayList();
			if(root.getChild("view-rela")==null){
				obj.put("ref_view_list", rel_Array);
			}else{
				if(root.getChild("view-rela").getChildren("rela-item")==null){
					obj.put("ref_view_list", rel_Array);
				}else{
					list=root.getChild("view-rela").getChildren("rela-item");
					for(Element ele:list){
						String  view_code1 =  ele.getChild("view-code").getTextTrim();
						List<Object> param5= new ArrayList<Object>();
						param5.add(view_code1);
						param5.add(dataMap.get("sysId").toString());
						String selectNodeIdByNodeCode="SELECT NODE_ID FROM  CSS_TOOLS.TRI_DATA_NODE WHERE NODE_CODE=? AND STATE='A' Start With node_name = ? And up_node_id = 0 Connect By Prior node_id = up_node_id";
						Map<String, Object> temMap5 =qryCenter.queryFirstRowByJdbcTemplate(selectNodeIdByNodeCode, param5);
						Integer view_id= Integer.parseInt(temMap5.get("NODE_ID").toString());
						Map o = new HashMap();
						String  view_name1 = ele.getChild("view-name").getTextTrim();
						o.put("view_id", view_id);
						o.put("view_name", view_name1);
						rel_Array.add(o);
					}
					obj.put("ref_view_list", rel_Array);
				}
			}
			//返回结果array--content
			//获取数据源
			errorlog="数据源错误";
			String city=dataMap.get("sysId").toString();
			String dataSourcexml=j.get("/"+city+"/databases_resource.xml");
			StringReader readxml = new StringReader(dataSourcexml);
			InputSource source2 = new InputSource(readxml);
			SAXBuilder sb1 = new SAXBuilder();
			Document x= (Document) sb1.build(source2);
			Element root_datasource = x.getRootElement();
			List<Element> datasourceList =root_datasource.getChildren("resouce-item");
			String url="";
			String userName="";
			String password="";
			String databaseType = "", driverClassName = "";//shayy 20150429 支持多种数据库
			for(Element e:datasourceList){
				if(e.getChild("resouce_code").getTextTrim().equals(view_database_resource)){
					databaseType = e.getChild("db-type").getTextTrim();
					url = getUrl(databaseType, e.getChild("database_IP").getTextTrim(),
							e.getChild("database_Port").getTextTrim(), e.getChild("database_SID").getTextTrim(),
							e.getChild("CONNECT_STR").getTextTrim());
					driverClassName = getDriver(databaseType);
					userName=e.getChild("database_name").getTextTrim();
					password=e.getChild("database_pwd").getTextTrim();
				}
			}
			//jdbc代码
			Connection conn = null;
		    Statement stmt = null;
		    ResultSet rs = null;
		    Class.forName(driverClassName);
		    conn = DriverManager.getConnection(url, userName,password);//连接数据库
		    stmt = conn.createStatement();
		    int bPageNum = (pageNum - 1) * page_Size;
		    int ePageNum = (pageNum) * page_Size+ 1;
		    List js = new ArrayList();
		    List count_js = new ArrayList();
			if(paramLinkeList.size()==0){
				//view_sql=" select * from (select rownum ru, a.* from ( "+view_sql+") a) where  ru<"+ePageNum+" and  ru>"+bPageNum;
			}else{
				boolean hashparam=false;
				List url_param_list= new ArrayList();
				for(String sysparam:paramLinkeList){
					//获取参数中对应的值，来替换具体的sql----- sysparam去除两边的大括号
					String str=sysparam.substring(sysparam.indexOf("{")+1, sysparam.indexOf("}"));
					/*if(sysparam.equals("{BILLINGCYCLEID}")){
						view_sql=view_sql.replace(sysparam,dataMap.get("BILLINGCYCLEID").toString());
					}
					if(sysparam.equals("{SUMAREAID}")){
						view_sql=view_sql.replace(sysparam,dataMap.get("SUMAREAID").toString());
					}
					if(sysparam.equals("{LATNID}")){
						view_sql=view_sql.replace("{LATNID}",dataMap.get("LATNID").toString());
					}*/
					if(dataMap.get(str)==null){
						//shayy add 20150428 增加默认值 --begin
						errorlog="参数默认值错误";
						List<Object> paramD = new ArrayList<Object>();
						paramD.add(sysparam);
						String getDefaultSqlByParam="select DEFAULT_VALUE from CSS.view_param_msg where PARAM_ALIAS=?";
						Map<String,Object> defaultSqlMap=qryCenter.queryFirstRowByJdbcTemplate(getDefaultSqlByParam, paramD);
						String defaultSql = defaultSqlMap.get("DEFAULT_VALUE")==null?"": defaultSqlMap.get("DEFAULT_VALUE").toString();
						if ("".equals(defaultSql) || defaultSql == null)
						{
							//查看是否有QUERY_PARAM_开头的默认值,有则替换
							String defaultStr = "QUERY_PARAM_" + str;
							if (dataMap.get(defaultStr)==null)
							{
								hashparam=true;
								continue;
							} else {
								view_sql=view_sql.replace(sysparam,dataMap.get(defaultStr).toString());
								//用于替代页面url中的参数值，以便显示默认值
								Map paramObject = new HashMap();
								paramObject.put("param_name", str);
								paramObject.put("param_value", dataMap.get(defaultStr).toString());
								url_param_list.add(paramObject);
							}
						} else {
							//defaultSql中的QUERY_PARAM_开头的参数替换
							List<String> sql_param_list = new ArrayList<String>();
							String sql_execute=defaultSql;
							while(sql_execute.indexOf("{")>-1){
								int index=sql_execute.indexOf("{");
								sql_execute=sql_execute.substring(index+1);
								int index1=sql_execute.indexOf("}");
								sql_param_list.add(sql_execute.substring(0,index1));
								sql_execute=sql_execute.substring(index1+1);
							}
							//动态替换defaultSql中的参数
							if(sql_param_list.size()>0){
								for(String s:sql_param_list){
									defaultSql=defaultSql.replace("{"+s+"}",dataMap.get(s)==null?"":dataMap.get(s).toString());
								}
							}
							//执行sql得到结果
							Map<String,Object> defaultValueMap=qryCenter.queryFirstRowByJdbcTemplate(defaultSql, null);
							Set itemSet = defaultValueMap.keySet();
							Iterator itemIte = itemSet.iterator();
							String defaultValue = "";
							while (itemIte.hasNext())
							{
								Object itemKey = itemIte.next();
								defaultValue = defaultValueMap.get(itemKey)==null?"": defaultValueMap.get(itemKey).toString();
							}
							log.info(defaultValue);
							if (defaultValue == null || "".equals(defaultValue))
							{//可能有的默认值sql是针对部分人的，那查不出结果的，也要验证下是否有QUERY_PARAM_开头的默认值可替换
								//查看是否有QUERY_PARAM_开头的默认值,有则替换
								String defaultStr = "QUERY_PARAM_" + str;
								if (dataMap.get(defaultStr)==null)
								{
									hashparam=true;
									continue;
								} else {
									view_sql=view_sql.replace(sysparam,dataMap.get(defaultStr).toString());
									//用于替代页面url中的参数值，以便显示默认值
									Map paramObject = new HashMap();
									paramObject.put("param_name", str);
									paramObject.put("param_value", dataMap.get(defaultStr).toString());
									url_param_list.add(paramObject);
								}
							} else {
								view_sql=view_sql.replace(sysparam,defaultValue);
								//用于替代页面url中的参数值，以便显示默认值
								Map paramObject = new HashMap();
								paramObject.put("param_name", str);
								paramObject.put("param_value", defaultValue);
								url_param_list.add(paramObject);
							}
						}
						//shayy add 20150428 增加默认值 --end
//						hashparam=true;
//						break;
					}else{
						view_sql=view_sql.replace(sysparam,dataMap.get(str).toString());
					}
				}
				obj.put("url_param_list", url_param_list);
				if(hashparam){
					obj.put("content",js);
					obj.put("total_rows", 0);
					obj.put("total_pages", 0);
				    obj.put("page_size", page_Size);
				    errorlog="无错误";
				    getViewQueryMap.put("errorlog", errorlog);
				    getViewQueryMap.put("telecom_data_view_get_response", obj);
			    	return getViewQueryMap;
				}
				
			}
			String count_sql="select count(*) NUM from ("+view_sql+")";
			view_sql=" select * from (select rownum ru, a.* from ( "+view_sql+") a) where  ru<"+ePageNum+" and  ru>"+bPageNum;
			errorlog="解析后sql无法执行错误,sql为:"+view_sql;
			rs = stmt.executeQuery(view_sql);
		    while (rs.next()) {//使当前记录指针定位到记录集的第一条记录
		    	Map ob123 = new HashMap();
		    	for(String column:colunmList){
					ob123.put(column, rs.getObject(column)==null?"":rs.getObject(column).toString());
				}
		    	js.add(ob123);
		    }
		    obj.put("content",js);
			//计算记录总数
		    rs=stmt.executeQuery(count_sql);
		    while (rs.next()) {//使当前记录指针定位到记录集的第一条记录
		    	Map ob = new HashMap();
		    	ob.put("NUM", rs.getString("NUM"));
		    	count_js.add(ob);
		    }
		    Map countMap=(Map) count_js.get(0);
		    int size=Integer.parseInt(countMap.get("NUM").toString());
		    obj.put("total_rows", size);
		    int total_pages;
		    if(size%page_Size==0){
		    	total_pages =size/page_Size;
		    }else{
		    	total_pages =size/page_Size+1;
		    }
		    obj.put("total_pages", total_pages);
		    obj.put("page_size", page_Size);
			rs.close();
		    stmt.close();
		    conn.close();
		    errorlog="无错误";
		    getViewQueryMap.put("errorlog", errorlog);
		} catch (Exception e) {
			getViewQueryMap.put("errorlog", errorlog+":"+e.getMessage());
		} 
		getViewQueryMap.put("telecom_data_view_get_response", obj);
    	return getViewQueryMap;
    }
    
    private static String getUrl(String databaseType, String ip, String port, String sid, String connectStr)
    {
    	String url = "";
    	if ("Oracle".equalsIgnoreCase(databaseType))
		{
			if (ip != null && !"".equals(ip))
			{
				url="jdbc:oracle:thin:@"+ip+":"+port+":"+sid;
			} else if (connectStr != null && !"".equals(connectStr))
			{
				url="jdbc:oracle:thin:@"+connectStr;
			}
		} else if ("SQLServer".equalsIgnoreCase(databaseType))
		{
			url="jdbc:jtds:sqlserver://"+ip+":"+port+"/"+sid;
		} else if ("MySql".equalsIgnoreCase(databaseType))
		{
			url="jdbc:mysql://"+ip+":"+port+"/"+sid;
		} else if ("Sybase".equalsIgnoreCase(databaseType))
		{
			url="jdbc:sybase:Tds:"+ip+":"+port+"/"+sid;
		} else if ("DB2".equalsIgnoreCase(databaseType))
		{
			url="jdbc:db2://"+ip+":"+port+"/"+sid;
		}
    	return url;
    }
    
    private static String getDriver(String databaseType)
    {
    	String driverClassName = "";
    	if ("Oracle".equalsIgnoreCase(databaseType))
		{
			driverClassName = "oracle.jdbc.driver.OracleDriver";
		} else if ("SQLServer".equalsIgnoreCase(databaseType))
		{
			driverClassName = "net.sourceforge.jtds.jdbc.Driver";
		} else if ("MySql".equalsIgnoreCase(databaseType))
		{
			driverClassName = "com.mysql.jdbc.Driver";
		} else if ("Sybase".equalsIgnoreCase(databaseType))
		{
			driverClassName = "com.sybase.jdbc3.jdbc.SybDriver";
		} else if ("DB2".equalsIgnoreCase(databaseType))
		{
			driverClassName = "com.ibm.db2.jcc.DB2Driver";
		}
    	return driverClassName;
    }

	@Override
	public Object userVerify(Map<String, Object> map) {
		Long a = System.currentTimeMillis();
		Map<String,Object> userVerifyMap = new HashMap<String,Object>();
		List<Object> paramList = new ArrayList<Object>();
		paramList.add(map.get("sysId").toString());
		paramList.add(map.get("staffId").toString());
		paramList.add(map.get("staffCode").toString());
		//判断是否是叶子节点
		String sql_select=" select * from  css_tools.tri_sys_user_vertify  t left join  CSS_TOOLS.TRI_SYS_RELA" +
				" t1  on t.sys_id=t1.sys_id where 1=1 and t1.rela_sys_id =? and t.STAFF_ID=? and t.STAFF_CODE=?";
		List<Map<String, Object>> list =qryCenter.queryByJdbcTemplate(sql_select, paramList);
		if(list.size()>0){
			userVerifyMap.put("result", 1);
			userVerifyMap.put("msg", "用户信息存在");
			Map<String,Object> map1 = new HashMap<String,Object>();
			map1.put("sysId", map.get("sysId").toString());
			map1.put("staffId", map.get("staffId").toString());
			map1.put("staffCode", map.get("staffCode").toString());
			map1.put("addDate",list.get(0).get("CONFIRM_DT")==null?"":list.get(0).get("CONFIRM_DT").toString());
			map1.put("idCard",list.get(0).get("ID_CARD")==null?"":list.get(0).get("ID_CARD").toString());
			map1.put("mail",list.get(0).get("MAIL")==null?"":list.get(0).get("MAIL").toString());
			userVerifyMap.put("record", map1);
		}else{
			userVerifyMap.put("result", 0);
			userVerifyMap.put("msg", "没有该用户信息");
		}
		paramList.add(userVerifyMap.get("result").toString());
		Long b =System.currentTimeMillis();
		paramList.add((double)b-a);
		String insertSql="INSERT INTO CSS_TOOLS.TRI_SYS_USER_QUERY_LOG(QUERY_LOG_ID, SYS_ID, STAFF_ID, STAFF_CODE, QUERY_DT, QUERY_DETAIL, QUERY_RESULT, QUERY_TIMER)"+
				" VALUES(CSS_TOOLS.SEQ_TRI_SYS_USER_QUERY_LOG.NEXTVAL, ?, ?, ?, SYSDATE, '', ?, ?)";
		qryCenter.updateByJdbcTemplate(insertSql, paramList);
		return userVerifyMap;
	}
}
